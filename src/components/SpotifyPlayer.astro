---
import { spotifyAPI } from '../utils/spotify';
import { spotifyAuth } from '../utils/spotifyAuth';

// Check authentication status
const isAuthenticated = false; // Will be updated by client-side JavaScript
let currentTrack = null;
let isPlaying = false;
let progress = 0;
let volume = 75;
let recentTracks = [];
let userPlaylists = [];

// Initialize error and tracks variables
let error = null;
let tracks = [];

// Spotify playlist ID for embedded player
const playlistId = '1NLHbmLFODUZLHpOdtrLYZ';

// Try to get tracks from Spotify API
try {
  // This will be handled by client-side JavaScript
  // For now, we'll use empty arrays to prevent errors
  tracks = [];
} catch (e) {
  error = 'Error al cargar las canciones de Spotify';
  console.error('Spotify API Error:', e);
}
---

<div class="spotify-player" id="spotifyPlayer">
  <div class="player-header">
    <div class="header-content">
      <div class="player-title">
        <svg class="spotify-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z"/>
        </svg>
        <span>Reproductor Spotify</span>
      </div>
      <div class="auth-status">
        <span id="auth-status-text" class="auth-disconnected">No conectado</span>
        <button id="auth-button" class="auth-button" onclick="authenticateSpotify()">
          Conectar con Spotify
        </button>
        <button id="logout-button" class="logout-button" onclick="logoutSpotify()" style="display: none;">
          Desconectar
        </button>
      </div>
    </div>
    <button class="minimize-btn" onclick="togglePlayer()">
      <svg viewBox="0 0 24 24" fill="currentColor">
        <path d="M19 13H5v-2h14v2z"/>
      </svg>
    </button>
    <p>Disfruta de nuestra selecci√≥n de m√∫sica retro mientras navegas</p>
  </div>

  <!-- Error Message -->
  <div id="error-message" class="error-message" style="display: none;">
    <span class="error-text"></span>
    <button class="retry-button" onclick="retryConnection()" style="display: none;">üîÑ Reintentar</button>
  </div>
  
  <!-- Loading Indicators -->
  <div class="loading-indicator" id="main-loading" style="display: none;">
    <div class="loading-spinner">‚ü≥</div>
    <span>Cargando...</span>
  </div>

  {error ? (
    <div class="error-message">
      <p>{error}</p>
      <p class="error-help">Configura tu Spotify Client ID y Client Secret en el archivo .env</p>
    </div>
  ) : (
    <div class="player-content">
      <!-- Current Track Display -->
      <div class="current-track" id="currentTrack">
        <div class="track-artwork">
          <img id="currentTrackImage" src={tracks[0]?.album.images[0]?.url || '/placeholder-album.jpg'} alt="Album cover" />
          <div class="playback-overlay" id="playbackOverlay">
            <div class="pulse-animation"></div>
          </div>
        </div>
        <div class="track-metadata">
          <h4 id="currentTrackTitle">{tracks[0]?.name || 'Selecciona una canci√≥n'}</h4>
          <p id="currentTrackArtist">{tracks[0]?.artists.map(a => a.name).join(', ') || 'Artista'}</p>
          <small id="currentTrackAlbum">{tracks[0]?.album.name || '√Ålbum'}</small>
        </div>
      </div>
      
      <!-- Progress Bar -->
      <div class="progress-container">
        <span class="time-display" id="currentTime">0:00</span>
        <div class="progress-bar" onclick="seekTrack(event)">
          <div class="progress-fill" id="progressFill"></div>
          <div class="progress-handle" id="progressHandle"></div>
        </div>
        <span class="time-display" id="totalTime">0:00</span>
      </div>
      
      <!-- Player Controls -->
      <div class="player-controls">
        <button class="control-btn secondary" onclick="toggleShuffle()" id="shuffleBtn" aria-label="Aleatorio">
          <span>üîÄ</span>
        </button>
        <button class="control-btn" id="prevBtn" onclick="previousTrack()">
          <svg viewBox="0 0 24 24" fill="currentColor">
            <path d="M6 6h2v12H6zm3.5 6l8.5 6V6z"/>
          </svg>
        </button>
        <button class="control-btn primary play-btn" id="playBtn" onclick="togglePlay()">
          <svg id="playIcon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M8 5v14l11-7z"/>
          </svg>
          <svg id="pauseIcon" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
          </svg>
        </button>
        <button class="control-btn" id="nextBtn" onclick="nextTrack()">
          <svg viewBox="0 0 24 24" fill="currentColor">
            <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/>
          </svg>
        </button>
        <button class="control-btn secondary" onclick="toggleRepeat()" id="repeatBtn" aria-label="Repetir">
          <span>üîÅ</span>
        </button>
      </div>
      
      <!-- Volume Control -->
      <div class="volume-control">
        <button class="volume-btn" onclick="toggleMute()" id="volumeBtn">
          <span id="volumeIcon">üîä</span>
        </button>
        <div class="volume-slider">
          <input type="range" id="volumeSlider" min="0" max="100" value="50" onchange="setVolume(this.value)">
        </div>
      </div>

      <!-- Tab Navigation -->
      <div class="tab-navigation">
        <button class="tab-btn active" onclick="switchTab('player')" id="playerTab">
          <svg viewBox="0 0 24 24" fill="currentColor">
            <path d="M8 5v14l11-7z"/>
          </svg>
          Reproductor
        </button>
        <button class="tab-btn" onclick="switchTab('playlist')" id="playlistTab">
          <svg viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z"/>
          </svg>
          Playlist Spotify
        </button>
        <button class="tab-btn" onclick="switchTab('tracks')" id="tracksTab">
          <svg viewBox="0 0 24 24" fill="currentColor">
            <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
          </svg>
          Lista de Canciones
        </button>
      </div>

      <!-- Tab Content -->
      <div class="tab-content">
        <!-- Player Tab -->
        <div class="tab-panel active" id="playerPanel">
          <div class="player-main-content">
            <div class="current-track-large">
              <div class="track-artwork-large">
                <img id="currentTrackImageLarge" src={tracks[0]?.album.images[0]?.url || '/placeholder-album.jpg'} alt="Album cover" />
                <div class="playback-overlay-large" id="playbackOverlayLarge">
                  <div class="pulse-animation"></div>
                </div>
              </div>
              <div class="track-metadata-large">
                <h3 id="currentTrackTitleLarge">{tracks[0]?.name || 'Selecciona una canci√≥n'}</h3>
                <p id="currentTrackArtistLarge">{tracks[0]?.artists.map(a => a.name).join(', ') || 'Artista'}</p>
                <small id="currentTrackAlbumLarge">{tracks[0]?.album.name || '√Ålbum'}</small>
              </div>
            </div>
          </div>
        </div>

        <!-- Playlist Tab -->
        <div class="tab-panel" id="playlistPanel">
          <div class="spotify-embed">
            <iframe 
              src={`https://open.spotify.com/embed/playlist/${playlistId}?utm_source=generator&theme=0`}
              width="100%" 
              height="352" 
              frameborder="0" 
              allowfullscreen="" 
              allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
              loading="lazy">
            </iframe>
          </div>
        </div>

        <!-- Tracks Tab -->
        <div class="tab-panel" id="tracksPanel">
          <div class="tracks-header">
            <h3>Lista de Canciones</h3>
            <div class="tracks-actions">
              {isAuthenticated && (
                <button class="refresh-btn" onclick="refreshPlaylist()" title="Actualizar lista">
                  üîÑ
                </button>
              )}
              <button id="create-playlist-btn" class="create-playlist-btn" onclick="createPlaylistFromSelected()" style="display: none;" title="Crear playlist con canciones seleccionadas">
                ‚ûï Crear Playlist
              </button>
            </div>
          </div>
          <div class="tracks" id="tracksList">
            {tracks.map((track, index) => (
              <div class="track-item" data-index={index} data-track-id={track.id} data-preview={track.preview_url} onclick="selectTrack(this)">
                <div class="track-selection">
                  <input type="checkbox" class="track-checkbox" onchange="toggleTrackSelection(this.closest('.track-item'))" onclick="event.stopPropagation()">
                </div>
                <div class="track-number">
                  <span class="number">{index + 1}</span>
                  <span class="play-indicator">‚ô™</span>
                </div>
                <div class="track-image">
                  <img 
                    src={track.album.images[0]?.url || '/placeholder-album.jpg'} 
                    alt={`${track.album.name} cover`}
                    loading="lazy"
                  />
                </div>
                <div class="track-info">
                  <div class="track-name">{track.name}</div>
                  <div class="track-artist">{track.artists.map(artist => artist.name).join(', ')}</div>
                  <small>{track.album.name}</small>
                </div>
                <div class="track-duration">
                  <small>{track.duration_ms ? Math.floor(track.duration_ms / 60000) + ':' + String(Math.floor((track.duration_ms % 60000) / 1000)).padStart(2, '0') : '--:--'}</small>
                </div>
                <div class="track-actions">
                  <a href={track.external_urls.spotify} target="_blank" class="spotify-link" title="Abrir en Spotify">
                    <svg viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z"/>
                    </svg>
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<style>
  .spotify-player {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d1810 50%, #1a1a1a 100%);
    border-radius: 16px;
    padding: 20px;
    margin: 20px 0;
    box-shadow: 0 8px 32px rgba(220, 38, 38, 0.15), 0 4px 16px rgba(0, 0, 0, 0.3);
    border: 2px solid rgba(220, 38, 38, 0.2);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .player-main-content {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .current-track-large {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 20px;
    padding: 20px;
    background: rgba(220, 38, 38, 0.1);
    border-radius: 12px;
    border: 1px solid rgba(220, 38, 38, 0.2);
  }

  .track-artwork-large {
    position: relative;
    width: 200px;
    height: 200px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
  }

  .track-artwork-large img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .playback-overlay-large {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .track-metadata-large h3 {
    color: #dc2626;
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .track-metadata-large p {
    color: #ccc;
    margin: 5px 0;
    font-size: 1.1rem;
  }

  .track-metadata-large small {
    color: #999;
    font-size: 0.9rem;
  }

  .tab-navigation {
    display: flex;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    padding: 4px;
    margin: 20px 0;
  }

  .tab-btn {
    flex: 1;
    background: none;
    border: none;
    color: #ccc;
    padding: 12px 16px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 0.9rem;
  }

  .tab-btn.active {
    background: rgba(220, 38, 38, 0.2);
    color: #dc2626;
  }

  .tab-btn:hover {
    background: rgba(220, 38, 38, 0.1);
    color: #dc2626;
  }

  .tab-btn svg {
    width: 16px;
    height: 16px;
  }

  .tab-content {
    min-height: 300px;
  }

  .tab-panel {
    display: none;
  }

  .tab-panel.active {
    display: block;
  }

  .spotify-embed {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
  }

  .tracks-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 12px;
    border-bottom: 1px solid rgba(220, 38, 38, 0.2);
  }

  .tracks-header h3 {
    color: #dc2626;
    margin: 0;
    font-size: 1.2rem;
  }

  .tracks-actions {
    display: flex;
    gap: 8px;
  }

  .refresh-btn, .create-playlist-btn {
    background: rgba(220, 38, 38, 0.1);
    border: 1px solid rgba(220, 38, 38, 0.3);
    color: #dc2626;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .refresh-btn:hover, .create-playlist-btn:hover {
    background: rgba(220, 38, 38, 0.2);
  }

  .tracks {
    max-height: 400px;
    overflow-y: auto;
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.2);
  }

  .track-item {
    display: flex;
    align-items: center;
    padding: 12px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    cursor: pointer;
    transition: all 0.2s ease;
    gap: 12px;
  }

  .track-item:hover {
    background: rgba(220, 38, 38, 0.1);
  }

  .track-item.selected {
    background: rgba(220, 38, 38, 0.2);
  }

  .track-selection {
    flex-shrink: 0;
  }

  .track-checkbox {
    width: 16px;
    height: 16px;
    accent-color: #dc2626;
  }

  .track-number {
    width: 30px;
    text-align: center;
    color: #999;
    font-size: 0.9rem;
  }

  .track-image {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    overflow: hidden;
    flex-shrink: 0;
  }

  .track-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .track-info {
    flex: 1;
    min-width: 0;
  }

  .track-name {
    color: #F5DEB3;
    font-weight: 500;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .track-artist {
    color: #ccc;
    font-size: 0.8rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .track-info small {
    color: #999;
    font-size: 0.75rem;
  }

  .track-duration {
    color: #999;
    font-size: 0.8rem;
    flex-shrink: 0;
  }

  .track-actions {
    flex-shrink: 0;
  }

  .spotify-link {
    color: #1db954;
    text-decoration: none;
    padding: 4px;
    border-radius: 4px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .spotify-link:hover {
    background: rgba(29, 185, 84, 0.1);
  }

  .spotify-link svg {
    width: 16px;
    height: 16px;
  }

  /* Basic styles for other elements */
  .player-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(220, 38, 38, 0.1);
  }

  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex: 1;
    margin-right: 16px;
  }

  .player-title {
    display: flex;
    align-items: center;
    gap: 12px;
    color: #dc2626;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .spotify-icon {
    width: 24px;
    height: 24px;
    color: #1db954;
  }

  .auth-status {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .auth-button, .logout-button {
    background: linear-gradient(135deg, #1db954, #1ed760);
    border: none;
    color: #F5DEB3;
    padding: 8px 12px;
    border-radius: 20px;
    cursor: pointer;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .auth-button:hover, .logout-button:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(29, 185, 84, 0.3);
  }

  .minimize-btn {
    background: rgba(220, 38, 38, 0.1);
    border: 1px solid rgba(220, 38, 38, 0.3);
    color: #dc2626;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .minimize-btn:hover {
    background: rgba(220, 38, 38, 0.2);
    transform: scale(1.1);
  }

  .error-message {
    background: linear-gradient(135deg, #ff4444, #cc0000);
    color: #F5DEB3;
    padding: 12px;
    border-radius: 8px;
    margin: 10px 0;
    text-align: center;
    font-size: 14px;
    box-shadow: 0 2px 8px rgba(255, 68, 68, 0.3);
  }

  .loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    padding: 20px;
    color: #dc2626;
  }

  .loading-spinner {
    animation: spin 1s linear infinite;
    font-size: 1.2rem;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .current-track {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px;
    background: rgba(220, 38, 38, 0.1);
    border-radius: 12px;
    border: 1px solid rgba(220, 38, 38, 0.2);
    margin-bottom: 20px;
  }

  .track-artwork {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    overflow: hidden;
    flex-shrink: 0;
  }

  .track-artwork img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .track-metadata {
    flex: 1;
    min-width: 0;
  }

  .track-metadata h4 {
    color: #dc2626;
    margin: 0 0 4px 0;
    font-size: 1rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .track-metadata p {
    color: #ccc;
    margin: 0 0 4px 0;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .track-metadata small {
    color: #999;
    font-size: 0.8rem;
  }

  .progress-container {
    display: flex;
    align-items: center;
    gap: 12px;
    margin: 16px 0;
  }

  .time-display {
    color: #ccc;
    font-size: 0.8rem;
    min-width: 35px;
    text-align: center;
  }

  .progress-bar {
    flex: 1;
    height: 6px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
    cursor: pointer;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #dc2626, #ef4444);
    border-radius: 3px;
    width: 0%;
    transition: width 0.1s ease;
  }

  .player-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
    margin: 20px 0;
  }

  .control-btn {
    background: rgba(220, 38, 38, 0.1);
    border: 1px solid rgba(220, 38, 38, 0.3);
    color: #dc2626;
    width: 44px;
    height: 44px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .control-btn:hover {
    background: rgba(220, 38, 38, 0.2);
    transform: scale(1.1);
  }

  .control-btn.primary {
    width: 56px;
    height: 56px;
    background: linear-gradient(135deg, #dc2626, #ef4444);
    color: #F5DEB3;
    border: none;
  }

  .control-btn.primary:hover {
    background: linear-gradient(135deg, #ef4444, #dc2626);
  }

  .control-btn svg {
    width: 20px;
    height: 20px;
  }

  .control-btn.primary svg {
    width: 24px;
    height: 24px;
  }

  .volume-control {
    display: flex;
    align-items: center;
    gap: 12px;
    margin: 16px 0;
  }

  .volume-btn {
    background: none;
    border: none;
    color: #dc2626;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 4px;
  }

  .volume-slider {
    flex: 1;
    max-width: 100px;
  }

  .volume-slider input {
    width: 100%;
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    outline: none;
    accent-color: #dc2626;
  }
</style>

<script>
  // Global variables
  let isAuthenticated = false;
  let currentTrack = null;
  let isPlaying = false;
  let playbackState = null;
  let currentPosition = 0;
  let duration = 0;
  let volume = 50;
  let isLoading = false;
  let tracks = [];
  let recentTracks = [];
  let userPlaylists = [];
  let pollingInterval = null;
  let isMinimized = false;
  let isShuffled = false;
  let repeatMode = 'off'; // 'off', 'track', 'context'

  // Initialize the player
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('SpotifyPlayer: Initializing...');
    
    // Check if user is already authenticated
    const token = localStorage.getItem('spotify_access_token');
    if (token) {
      try {
        // Verify token is still valid
        const response = await fetch('https://api.spotify.com/v1/me', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          isAuthenticated = true;
          updateAuthStatus();
          await loadUserData();
          startPolling();
        } else {
          // Token expired, clear it
          localStorage.removeItem('spotify_access_token');
          localStorage.removeItem('spotify_refresh_token');
        }
      } catch (error) {
        console.error('Error verifying token:', error);
      }
    }
    
    // Set default active tab
    setTimeout(() => {
      switchTab('playerPanel');
    }, 100);
  });

  // Authentication functions
  window.authenticateSpotify = async function() {
    try {
      setLoading(true);
      const authUrl = await spotifyAuth.getAuthUrl();
      window.location.href = authUrl;
    } catch (error) {
      console.error('Error during authentication:', error);
      showError('Error al iniciar autenticaci√≥n con Spotify');
    } finally {
      setLoading(false);
    }
  };

  window.logoutSpotify = function() {
    localStorage.removeItem('spotify_access_token');
    localStorage.removeItem('spotify_refresh_token');
    isAuthenticated = false;
    updateAuthStatus();
    stopPolling();
    clearCurrentTrack();
    showSuccess('Desconectado de Spotify');
  };

  // UI update functions
  function updateAuthStatus() {
    const statusText = document.getElementById('auth-status-text');
    const authButton = document.getElementById('auth-button');
    const logoutButton = document.getElementById('logout-button');
    
    if (isAuthenticated) {
      statusText.textContent = 'Conectado';
      statusText.className = 'auth-connected';
      authButton.style.display = 'none';
      logoutButton.style.display = 'inline-block';
    } else {
      statusText.textContent = 'No conectado';
      statusText.className = 'auth-disconnected';
      authButton.style.display = 'inline-block';
      logoutButton.style.display = 'none';
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('error-message');
    const errorText = errorDiv.querySelector('.error-text');
    errorText.textContent = message;
    errorDiv.style.display = 'flex';
    
    setTimeout(() => {
      errorDiv.style.display = 'none';
    }, 5000);
  }

  function showSuccess(message) {
    // Create a temporary success message
    const successDiv = document.createElement('div');
    successDiv.className = 'success-message';
    successDiv.textContent = message;
    successDiv.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #1db954, #1ed760);
      color: #F5DEB3;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(29, 185, 84, 0.3);
      z-index: 1000;
      font-size: 14px;
      font-weight: 500;
    `;
    
    document.body.appendChild(successDiv);
    
    setTimeout(() => {
      successDiv.remove();
    }, 3000);
  }

  function setLoading(loading) {
    isLoading = loading;
    const loadingElements = document.querySelectorAll('.loading-indicator');
    const controlButtons = document.querySelectorAll('.control-btn');
    
    loadingElements.forEach(el => {
      el.style.display = loading ? 'block' : 'none';
    });
    
    controlButtons.forEach(button => {
      button.disabled = loading;
      button.style.opacity = loading ? '0.6' : '1';
    });
  }

  // Tab functionality
  window.switchTab = function(tabName) {
    // Hide all tab panels
    const tabPanels = document.querySelectorAll('.tab-panel');
    tabPanels.forEach(panel => {
      panel.classList.remove('active');
    });
    
    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(btn => {
      btn.classList.remove('active');
    });
    
    // Show selected tab panel
    const selectedPanel = document.getElementById(tabName);
    if (selectedPanel) {
      selectedPanel.classList.add('active');
    }
    
    // Add active class to corresponding button
    const activeButton = document.querySelector(`[onclick="switchTab('${tabName}')"]`);
    if (activeButton) {
      activeButton.classList.add('active');
    }
  };

  // Placeholder functions for compatibility
  window.togglePlay = function() {
    console.log('Toggle play/pause');
  };

  window.previousTrack = function() {
    console.log('Previous track');
  };

  window.nextTrack = function() {
    console.log('Next track');
  };

  window.toggleShuffle = function() {
    console.log('Toggle shuffle');
  };

  window.toggleRepeat = function() {
    console.log('Toggle repeat');
  };

  window.toggleMute = function() {
    console.log('Toggle mute');
  };

  window.setVolume = function(value) {
    console.log('Set volume:', value);
  };

  window.seekTrack = function(event) {
    console.log('Seek track');
  };

  window.selectTrack = function(element) {
    console.log('Select track');
  };

  window.togglePlayer = function() {
    console.log('Toggle player minimize');
  };

  window.retryConnection = function() {
    console.log('Retry connection');
  };

  window.refreshPlaylist = function() {
    console.log('Refresh playlist');
  };

  window.createPlaylistFromSelected = function() {
    console.log('Create playlist from selected');
  };

  window.toggleTrackSelection = function(element) {
    console.log('Toggle track selection');
  };

  // Utility functions
  async function loadUserData() {
    console.log('Loading user data...');
  }

  function startPolling() {
    console.log('Starting playback polling...');
  }

  function stopPolling() {
    console.log('Stopping playback polling...');
  }

  function clearCurrentTrack() {
    console.log('Clearing current track...');
  }
</script>